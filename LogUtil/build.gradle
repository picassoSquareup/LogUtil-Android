plugins {
    id 'com.android.library'
    id 'maven-publish'
}
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}
android {
    compileSdk 32
    defaultConfig {
        minSdk 21
        targetSdk 32
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

    }
    task myTask() {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'cmd', '/c', 'whoami'
            standardOutput = stdout;
        }
        println "Output: $stdout"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

}


project.afterEvaluate {
    publishToMavenLocal {
        def groupId = "com.github.picassoSquareup"
        def artifactId = "LogUtil"
        def versionName = "0.8.0-local"
        def debugSuffix = "-debug"
        def releaseSuffix = "-release"
        publishing {
            publications {
                LibraryRelease(MavenPublication) {
                    from components.release
                    artifact(sourceJar)
                    setGroupId groupId
                    setArtifactId artifactId
                    version versionName + releaseSuffix
                }
                LibraryDebug(MavenPublication) {
                    from components.debug
                    artifact(sourceJar)
                    setGroupId groupId
                    setArtifactId artifactId
                    version versionName + debugSuffix
                }
            }
            publications.all {
                pom.withXml {
                    asNode().dependencies.'*'
                            .findAll() {
                                it.scope.text() == 'runtime' &&
                                        project.configurations.implementation.allDependencies.find {
                                            dep -> dep.name == it.artifactId.text()
                                        }
                            }.each { it.scope*.value = 'compile'}
                }
            }
        }

        doLast {
            def prettyPrint = {
                1.upto(100, { print "=" })
                println()
            }
            println()
            prettyPrint()
            println "PUBLICATION FINISHED"
            println "Artifact RELEASE: " + groupId + ":" + artifactId +  ":" + versionName + releaseSuffix
            println "Artifact DEBUG: " + groupId + ":" + artifactId +  ":" + versionName + debugSuffix
            prettyPrint()
        }
    }
}
